#!/usr/bin/env sh

set -e

# Use colors, but only if connected to a terminal
# and that terminal supports them.

# The [ -t 1 ] check only works when the function is not called from
# a subshell (like in `$(...)` or `(...)`, so this hack redefines the
# function at the top level to always return false when stdout is not
# a tty.
if [ -t 1 ]; then
  is_tty() {
    true
  }
else
  is_tty() {
    false
  }
fi

# Adapted from code and information by Anton Kochkov (@XVilka)
# Source: https://gist.github.com/XVilka/8346728

# Adapted from code and information by Anton Kochkov (@XVilka)
# Source: https://gist.github.com/XVilka/8346728
supports_truecolor() {
    case "$COLORTERM" in
    truecolor | 24bit) return 0 ;;
    esac

    case "$TERM" in
    iterm | \
        tmux-truecolor | \
        linux-truecolor | \
        xterm-truecolor | \
        screen-truecolor) return 0 ;;
    esac

    return 1
}

if is_tty; then
  if supports_truecolor; then
    FMT_RAINBOW=(
      "$(printf '\033[38;2;255;0;0m')"
      "$(printf '\033[38;2;255;97;0m')"
      "$(printf '\033[38;2;247;255;0m')"
      "$(printf '\033[38;2;0;255;30m')"
      "$(printf '\033[38;2;77;0;255m')"
      "$(printf '\033[38;2;168;0;255m')"
      "$(printf '\033[38;2;245;0;172m')"
    )
  else
    FMT_RAINBOW=(
      "$(printf '\033[38;5;196m')"
      "$(printf '\033[38;5;202m')"
      "$(printf '\033[38;5;226m')"
      "$(printf '\033[38;5;082m')"
      "$(printf '\033[38;5;021m')"
      "$(printf '\033[38;5;093m')"
      "$(printf '\033[38;5;163m')"
    )
  fi

  FMT_BLACK=$(printf '\033[30m')
  FMT_RED=$(printf '\033[31m')
  FMT_GREEN=$(printf '\033[32m')
  FMT_YELLOW=$(printf '\033[33m')
  FMT_BLUE=$(printf '\033[34m')
  FMT_BOLD=$(printf '\033[1m')
  FMT_RESET=$(printf '\033[0m')
fi

function prompt() {
    printf '%s%s%s' $FMT_YELLOW $FMT_RESET "$1"
    read -p " ${FMT_BLACK}[y/N]${FMT_RESET} ${FMT_BOLD}" a
    printf "${FMT_RESET}"
    if [[ $a == "y" || $a == "Y" ]]; then
        return 1
    fi
    return 0
}

# Success logging
function success() {
    printf "$(tput setaf 64)âœ“ %s$(tput sgr0)\n" "$@"
}

# Info logging
function info() {
    printf "$(tput setaf 27)INFO: %s$(tput sgr0)\n" "$@"
}

# Warning logging
function warning() {
    printf "$(tput setaf 136)WARN: %s$(tput sgr0)\n" "$@"
}

# Error logging
function error() {
    printf "$(tput setaf 1)ERR: %s$(tput sgr0)\n" "$@"
}

function echo_green() {
    printf "$(tput setaf 64)%s$(tput sgr0)\n" "$@"
}

function echo_blue() {
    printf "$(tput setaf 27)%s$(tput sgr0)\n" "$@"
}

function echo_yellow() {
    printf "$(tput setaf 136)%s$(tput sgr0)\n" "$@"
}

function echo_red() {
    printf "$(tput setaf 1)%s$(tput sgr0)\n" "$@"
}

function separator() {
    for ((i = 1; i <= 80; i++)); do
        printf "$(tput setaf 237)-$(tput sgr0)"
    done
    echo
}

# Test whether we're in a git repo
function is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}
