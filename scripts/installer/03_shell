#!/usr/bin/env sh

setup_shell() {
    # Skip setup if the user wants or stdin is closed (not running interactively).
    if [ "$CHANGE_SHELL" = no ]; then
        warning "Shell change skipped, caused by CHANGE_SHELL set to no."
        return
    fi

    header "Change default shell to zsh"

    # If this user's login shell is already "zsh", do not attempt to switch.
    if [ "$(basename -- "$SHELL")" = "zsh" ]; then
        success "Your Shell already set to zsh!"
        return
    fi

    # If this platform doesn't provide a "chsh" command, bail out.
    if ! command_exists chsh; then
        error "Doty can't change your shell automatically because this system does not have chsh."
        info "Please manually change your default shell to zsh!"
        return
    fi

    info "Time to change your default shell to zsh!"

    # Prompt for user choice on changing the default login shell
    if ! prompt "Do you want to change your default shell to zsh?"; then
        warning "Shell change skipped."
        return
    fi

    # Check if we're running on Termux
    case "$PREFIX" in
    *com.termux*)
        termux=true
        zsh=zsh
        ;;
    *) termux=false ;;
    esac

    if [ "$termux" != true ]; then
        # Test for the right location of the "shells" file
        if [ -f /etc/shells ]; then
            shells_file=/etc/shells
        elif [ -f /usr/share/defaults/etc/shells ]; then # Solus OS
            shells_file=/usr/share/defaults/etc/shells
        else
            error "Could not find $(fmt_code "/etc/shells") file."
            error "Please manually change your default shell!"
            return
        fi

        # Get the path to the right zsh binary
        # 1. Use the most preceding one based on $PATH, then check that it's in the shells file
        # 2. If that fails, get a zsh path from the shells file, then check it actually exists
        if ! zsh=$(command -v zsh) || ! grep -qx "$zsh" "$shells_file"; then
            if ! zsh=$(grep '^/.*/zsh$' "$shells_file" | tail -n 1) || [ ! -f "$zsh" ]; then
                error "No zsh binary found or not present in $(fmt_code "$shells_file")"
                error "Please manually change your default shell!"
                return
            fi
        fi
    fi

    # We're going to change the default shell, so back up the current one
    if [ -n "$SHELL" ]; then
        # shellcheck disable=SC2154
        echo "$SHELL" > "$backup_dir/.shell"
    else
        # shellcheck disable=SC2154
        grep "^$USER:" /etc/passwd | awk -F: '{print $7}' >"$backup_dir/.shell"
    fi

    info "Changing your shell to $(fmt_code "$zsh")..."

    # Check if user has sudo privileges to run `chsh` with or without `sudo`
    #
    # This allows the call to succeed without password on systems where the
    # user does not have a password but does have sudo privileges, like in
    # Google Cloud Shell.
    #
    # On systems that don't have a user with passwordless sudo, the user will
    # be prompted for the password either way, so this shouldn't cause any issues.
    #
    if user_can_sudo; then
        sudo -k chsh -s "$zsh" "$USER" # -k forces the password prompt
    else
        chsh -s "$zsh" "$USER" # run chsh normally
    fi

    # Check if the shell change was successful
    # shellcheck disable=SC2181
    if [ $? -ne 0 ]; then
        error "chsh command unsuccessful."
        error "Please manually change your default shell!"
    else
        export SHELL="$zsh"
        success "Shell successfully changed to $(fmt_code "$zsh")."
    fi
}

setup_shell
printf '\n' >&2
