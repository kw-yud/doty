#!/usr/bin/env bash
# A firewall for Encrypted proxy on Mac and BSD.
# It does the following:
# - Ensures that all traffic to the public internet must go through a encrypted interface (VPN Gateway).
# - Ensures that we don't leak ipv6 traffic.
# - Ensures that we cannot make a DNS query that is not to a VPN gateway.
# - Allows direct access to the local networks.
#
# This is mostly an *egress* firewall, to prevent unencrypted traffic. This firewall should be enabled
# before attempting to connect VPN. It should disabled only once the user has indicated they no longer
# want Encrypted Internet Proxy.
#
# NOTE:
# Rules are applied in order first to last.Final matching rule has last word.
# You can use `pfctl -a bitmask -sr` to confirm that firewall is loaded.
#
# TODO:
# - Supports ipv6 VPN Gateway.
#
# USAGE:
#   vpn-net start <gateway> <gateway> ...
#   vpn-net stop

set -euo pipefail

SCRIPTNAME=$(basename "$0")
SCRIPT_DIR=$(dirname $(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd))

# List of IP address of VPN server.
declare -a VPN_IP=()
# List of utun interface as gateways.
declare -a UTUN_IFACE=()
# DNS resolver for mapping domain names to IP addresses.
DNS_RESOLVER="1.1.1.1"
# Domains to bypass VPN
declare -a HOSTS=()
# CIDRs to bypass VPN, ensure to add VPN server IP address as well.
declare -a IP_ADDRESSES=("192.168.1.0/24" "192.168.0.0/24" "192.168.8.0/24")
ENABLE_ROUTING=

# The pfctl profile name
PROFILE_NAME="vpn.force"

anchor_name="doty-bitmask"

help() {
  printf '%s%s                                                %s%s\n' "${FMT_BOLD}${FMT_GREEN}" "A firewall for Encrypted proxy on Mac and BSD" "$FMT_RESET" >&2
  __usage="${FMT_GRAY}
${FMT_GREEN}Usage:${FMT_RESET}
${SCRIPTNAME} <commands> [options]

${FMT_BLUE}Commands:${FMT_RESET}
    ${FMT_YELLOW}start [options] $(fmt_code "<gateway> <gateway> ...")${FMT_RESET}              Start and apply configurations.
    ${FMT_YELLOW}stop ${FMT_RESET}                                                  Stop and remove all restore configurations.

${FMT_BLUE}Options:${FMT_RESET}
    ${FMT_YELLOW}-i, --vpn-ip${FMT_RESET}                                           IP address of VPN Server.
    ${FMT_YELLOW}-p, --vpn-port${FMT_RESET}                                         Port of VPN Server.
    ${FMT_YELLOW}-h, --host${FMT_RESET}                                             Hosts to bypass VPN (e.g., $(fmt_code "koin.works")).
    ${FMT_YELLOW}-a, --ip${FMT_RESET}                                               CIDRs to bypass VPN, ensure to add VPN server IP address as well.
    ${FMT_YELLOW}-d, --dns${FMT_RESET}                                              DNS resikver for mappung domain names to IP address (default: $(fmt_code "1.1.1.1")).
    ${FMT_YELLOW}-r, --route${FMT_RESET}                                            Indicates whether to enable routing table to bypass VPN for specified IP address.
    ${FMT_YELLOW}-P, --profile${FMT_RESET}                                          The pfctl profile rules to be used.
    ${FMT_YELLOW}-v, --verbose${FMT_RESET}                                          Show verbose message.
    ${FMT_YELLOW}-h, --help${FMT_RESET}                                             Display this message.

    ${FMT_BLUE}Example:${FMT_RESET}
1) $(fmt_code "${SCRIPTNAME} start \"utun0\" \"utun1\"")
2) $(fmt_code "${SCRIPTNAME} stop")

Got bugs? solve it on your own. (✿◠‿◠)
"

  echo -en "$__usage"
}

# =====================================================================================================================
# Utilities
# =====================================================================================================================

# The [ -t 1 ] check only works when the function is not called from
# a subshell (like in `$(...)` or `(...)`, so this hack redefines the
# function at the top level to always return false when stdout is not
# a tty.
if [ -t 1 ]; then
  is_tty() {
    true
  }
else
  is_tty() {
    false
  }
fi

_verbose=0

command_exists() {
  command -v "$@" >/dev/null 2>&1
}

prompt() {
  printf '%s%s%s' "$FMT_YELLOW" "$FMT_RESET" "$1"
  read -p " ${FMT_BLACK}[y/N]${FMT_RESET} ${FMT_BOLD}" a
  printf "${FMT_RESET}"
  if [[ $a == "y" || $a == "Y" ]]; then
    return 1
  fi
  return 0
}

fmt_underline() {
  is_tty && printf '\033[4m%s\033[24m\n' "$*" || printf '%s\n' "$*"
}

# shellcheck disable=SC2016 # backtick in single-quote
fmt_code() {
  is_tty && printf '\033[2m%s\033[22m\n' "$*" || printf '`%s`\n' "$*"
}

debug() {
  if [ ! -z $_verbose ]; then
    printf '%s%s%s\n' "${FMT_BOLD}${FMT_PURPLE}" "$1" "${FMT_RESET}${FMT_RESET}" >&2
    if [ "$#" -gt 1 ]; then
      shift
      separator_gray
      printf '%s' "${FMT_GRAY}" >&2
      echo "$*"
      printf '%s' "${FMT_RESET}" >&2
      separator_gray
    fi
  fi
}

success() {
  printf '%sSUCCESS: %s%s%s\n' "${FMT_BOLD}${FMT_GREEN}" "${FMT_RESET}${FMT_GREEN}" "$*" "$FMT_RESET" >&2
}

info() {
  printf '%sINFO: %s%s%s\n' "${FMT_BOLD}${FMT_BLUE}" "${FMT_RESET}${FMT_BLUE}" "$*" "$FMT_RESET" >&2
}

warning() {
  printf '%sWARN: %s%s%s\n' "${FMT_BOLD}${FMT_YELLOW}" "${FMT_RESET}${FMT_YELLOW}" "$*" "$FMT_RESET" >&2
}

error() {
  printf '%sERROR: %s%s%s\n' "${FMT_BOLD}${FMT_RED}" "${FMT_RESET}${FMT_RED}" "$*" "$FMT_RESET" >&2
}

fatal() {
  error "$2"
  echo
  echo_red "[!] Exiting..."
  exit "${1:1}"
}

echo_green() {
  printf '%s%s%s' "${FMT_GREEN}" "$*" "$FMT_RESET" >&2
}

echo_blue() {
  printf '%s%s%s' "${FMT_BLUE}" "$*" "$FMT_RESET" >&2
}

echo_yellow() {
  printf '%s%s%s' "${FMT_YELLOW}" "$*" "$FMT_RESET" >&2
}

echo_red() {
  printf '%s%s%s' "${FMT_RED}" "$*" "$FMT_RESET" >&2
}

separator() {
  printf -- "${FMT_BOLD}-${FMT_RESET}%.0s" {1..80}
  echo ""
}

separator_gray() {
  printf -- "${FMT_BOLD}${FMT_GRAY}-${FMT_RESET}%.0s" {1..80}
  echo ""
}

setup_color() {
  # Only use colors if connected to a terminal
  if ! is_tty; then
    FMT_PURPLE=""
    FMT_RED=""
    FMT_GREEN=""
    FMT_YELLOW=""
    FMT_BLUE=""
    FMT_BOLD=""
    FMT_GRAY=""
    FMT_RESET=""
    return
  fi

  FMT_PURPLE=$(printf '\033[38;5;163m')
  FMT_RED=$(printf '\033[31m')
  FMT_GREEN=$(printf '\033[32m')
  FMT_YELLOW=$(printf '\033[33m')
  FMT_BLUE=$(printf '\033[34m')
  FMT_BOLD=$(printf '\033[1m')
  FMT_GRAY=$(printf '\033[1;38;5;243m')
  FMT_RESET=$(printf '\033[0m')
}
setup_color
# =====================================================================================================================
# END - Utilities
# =====================================================================================================================

fw_rules=""
# Append a rule to the anchor `dotybitmask`
add_rule() {
  if [ -z "$fw_rules" ]; then
    fw_rules="$*"
  else
    fw_rules="${fw_rules}\n$*"
  fi
}

apply_rules() {
  debug "Applying rules..." "$fw_rules"
  echo_blue "Do you want to proceed? (Y/n): "
  read -r answer
  if [ "$answer" = "Y" ] || [ "$answer" = 'y' ] || [ -z "$answer" ]; then
    echo "$fw_rules" | pfctl -a $anchor_name -mf -
  else
    echo_yellow "  ABORTED"
  fi

  echo
}

start() {
  # Find default public interface. If using WiFi, it's usually "en0".
  ext_iface=$(route -n get -net default | grep interface | awk '{print $2}' || echo "en0")
  # vpn_ip=$(scutil --nc show Ivacy | grep 'CommRemoteAddress' | cut -d' ' -f 5)

  info "Using profile \"${PROFILE_NAME}\" for default interface \"${ext_iface}\""

  if [ ! -z "$ENABLE_ROUTING" ]; then
    gateway=$(netstat -nr | grep default | grep "$ext_iface" | awk '{print $2}' | head -1)
    info "Using gateway \"${gateway}\""
    info "Resolving domains..."

    if [[ ${#HOSTS[@]} -gt 0 ]]; then
      for website in ${HOSTS[*]}; do
        debug "Resolving $website"
        for ip in $(dig @"${DNS_RESOLVER}" +short "${website}" | grep '^[.0-9]*$'); do
          debug "Resolving $website as $ip"

          if ! (printf '%s\n' "${IP_ADDRESSES[*]}" | grep -q "$ip"); then
            ip_addresses+=("$ip/32")
          fi
        done
      done
    fi

    for ip in ${IP_ADDRESSES[*]}; do
      debug "Register route" "- $ip through $gateway"
      route delete "${ip}" || true
      route -n add -net "$ip" "$gateway"
    done
  fi

  ifconfig "${ext_iface}" down
  route flush
  ifconfig "${ext_iface}" up

  # Disable pf
  pfctl -d 2>/dev/null || true
  # Flushes all the packet filter rules
  pfctl -F all

  # Enable pf
  pfctl -e 2>/dev/null || true

  rules=$(
    cat <<EOF
# Options
set block-policy drop
set fingerprints "/etc/pf.os"
set ruleset-optimization basic
set skip on lo0
set debug "loud"
set optimization aggressive

# Normalization
# Scrub incoming packets
scrub in all no-df

$(cat "/etc/pf.conf")

anchor "${anchor_name}"
EOF
  )

  # Enable pflog
  # Create a pflog interface and monitor all packets logged on it:
  # tcpdump -lnettt -i pflog0
  # tcpdump -lnettt -r /var/log/pflog
  log_iface="$(ifconfig -v | grep -e "^pflog" | awk 'BEGIN {FS = ":";} { print $1 }' | head -n1 | tail -n1)"
  monitor_iface="$(ifconfig -v | grep -e "^pflog" | awk 'BEGIN {FS = ":";} { print $1 }' | head -n2 | tail -n1)"
  block_iface="$(ifconfig -v | grep -e "^pflog" | awk 'BEGIN {FS = ":";} { print $1 }' | head -n3 | tail -n1)"
  if [ -z "$log_iface" ]; then
    log_iface=$(ifconfig pflog create)
  fi
  if [ -z "$monitor_iface" ] || [ "$monitor_iface" == "$log_iface" ]; then
    monitor_iface=$(ifconfig pflog create)
  fi
  if [ -z "$block_iface" ] || [ "$monitor_iface" == "$block_iface" ]; then
    block_iface=$(ifconfig pflog create)
  fi
  ifconfig "$log_iface" up
  ifconfig "$monitor_iface" up
  ifconfig "$block_iface" up

  # load a pf config equal to "set skip on lo0" + /etc/pf.conf + anchor "dotybitmask"
  debug "Applying rules..." "$rules"
  echo -e "$rules" | pfctl -ef -

  info "Patch rules.." "${SCRIPT_DIR}/pf.anchors/${PROFILE_NAME}.rules"
  add_rule "$(
    cat "${SCRIPT_DIR}/pf.anchors/${PROFILE_NAME}.rules" |
      sed "7s/^vpn_ip \=.*$/vpn_ip = \"${VPN_IP[*]}\"/" |
      sed "8s/^vpn_port \=.*$/vpn_port = \"${VPN_PORT[*]}\"/" |
      sed "11s/^ext_iface \=.*$/ext_iface = \"${ext_iface}\"/" |
      sed "13s/^log_iface \=.*$/log_iface = \"${log_iface}\"/" |
      sed "14s/^monitor_iface \=.*$/monitor_iface = \"${monitor_iface}\"/" |
      sed "15s/^block_iface \=.*$/block_iface = \"${block_iface}\"/" |
      sed "17s/^table <gateways>.*$/table <gateways> const { $(echo "${UTUN_IFACE[*]}" | sed "s/ /, /") }/" |
      sed "s/ utun_iface / ${UTUN_IFACE[*]} /"
  )"

  apply_rules || error "Unable to apply rules"
  echo
  info "Current states"
  pfctl -s all
  echo
  info "All loaded rules"
  pfctl -a '*' -sr

  # Useful command to check what traffic is going out from wifi without VPN
  # iftop -i en0
}

# Status
status() {
  cnt=$(pfctl -a $anchor_name -s rules 2>/dev/null | wc -l)
  info "Rules loaded $cnt"

  pfctl -a '*' -sr
  pfctl -a $anchor_name -s rules
  pfctl -a $anchor_name -s info
}

# Stop firewall
stop() {
  info "Stopping..."
  # Flush everything from anchor
  pfctl -a $anchor_name -F all
  pfctl -ef /etc/pf.conf

  status
}

__commands=""

# Parse command from arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  # Help text
  -h | --help | help)
    help
    exit 0
    ;;
  -v | --verbose)
    _verbose=1
    shift
    ;;
  start)
    __commands="start"
    shift
    ;;
  status)
    __commands="status"
    shift
    ;;
  stop)
    __commands="stop"
    shift
    ;;
  *)
    break
    ;;
  esac
done

if [ -z "$__commands" ]; then
  error "unknown command: ${FMT_GRAY}$*${FMT_RESET}"
  echo
  help
  exit 1
fi

case $__commands in
start)
  # Parse arguments as options
  while [[ $# -gt 0 ]]; do
    case $1 in
    -i | --vpn-ip)
      VPN_IP+=("$2")
      shift
      shift
      ;;
    -p | --vpn-port)
      VPN_PORT+=("$2")
      shift
      shift
      ;;
    -a | --ip)
      IP_ADDRESSES+=("$2")
      shift
      shift
      ;;
    -h | --host)
      HOSTS+=("${2}")
      shift
      shift
      ;;
    -d | --dns)
      DNS_RESOLVER="${2}"
      shift
      shift
      ;;
    -r | --route)
      ENABLE_ROUTING=1
      shift
      ;;
    -P | --profile)
      PROFILE_NAME="${2}"
      shift
      shift
      ;;
    *)
      UTUN_IFACE+=("$1")
      shift
      ;;
    esac
  done

  if [[ ${#VPN_IP[@]} -eq 0 ]]; then
    error "missing required ${FMT_BOLD}VIP address of VPN server${FMT_RESET}"
    echo
    help
    exit 2
  fi

  if [[ ${#UTUN_IFACE[@]} -eq 0 ]]; then
    error "missing required ${FMT_BOLD}Vutun interface gateways${FMT_RESET}"
    echo
    help
    exit 2
  fi

  start || fatal 2 "unable to start firewall"
  ;;
status)
  status || fatal 2 "unable to list PF Rules"
  ;;
stop)
  stop || fatal 2 "unable to stop PF filter"
  ;;
esac

echo_red "DONE"
