# Filtering

# Internal interface; use the command `ifconfig -a` or:
# $ ifconfig | pcregrep -M -o '^[^\t:]+:([^\n]|\n\t)*status: active' | egrep -o -m 1 '^[^\t:]+'
int_iface = "en0"

# VPN network
# $vpn_net == utun4/24 when Tunnelblick creates utun4
vpn_net = "10.18.0/24"  # utun4 interface doesn't exist at boot time

# Use a list in case Tunnelblick creates multiples utun interfaces
tun_iface = "{ utun0, utun1, utun2, utun3, utun4}"

# Allow VPN connections to the VPN host:
# http://serverfault.com/questions/555594/troubleshoot-broken-tcp-from-openvpn-client-to-server-but-ping-traceroute-work
#pass in quick on $tun_iface reply-to $tun_iface inet from $vpn_net to $int_iface
# Rule for a lot of utun interfaces in case Tunnelblick creates extras
# pass in quick on utun0 reply-to utun0 inet from $vpn_net to $int_if
# pass in quick on utun1 reply-to utun1 inet from $vpn_net to $int_if
# pass in quick on utun2 reply-to utun2 inet from $vpn_net to $int_if
# pass in quick on utun3 reply-to utun3 inet from $vpn_net to $int_if
# pass in quick on utun4 reply-to utun4 inet from $vpn_net to $int_if
# pass in quick on utun5 reply-to utun5 inet from $vpn_net to $int_if
# pass in quick on utun6 reply-to utun6 inet from $vpn_net to $int_if
# pass in quick on utun7 reply-to utun7 inet from $vpn_net to $int_if
# pass in quick on utun8 reply-to utun8 inet from $vpn_net to $int_if
# pass in quick on utun9 reply-to utun9 inet from $vpn_net to $int_if

# Local net
table <lan_inet> const { 10/8, 172.16/12, 192.168/16 }
table <lan_inet6> const { ::1, fe80::/10 }

#pass quick inet from <lan_inet> to any keep state
#pass quick inet6 from <lan_inet6> to any keep state

# allow out the default range for traceroute(8):
# "base+nhops*nqueries-1" (33434+64*3-1)
#pass out on $int_iface inet proto udp from any to any port 33433 >< 33626

# Allow critical system traffic
#pass in quick inet proto udp from port bootps to port bootpc
#pass out quick inet proto udp from port bootpc to port bootps

# LAN services: block access, except from localnet
lan_udp_services = "{ domain, net-assistant, 5001 }"
lan_tcp_services = "{ domain, kerberos, microsoft-ds, eyetv, 3128, net-assistant, 5001, 5900:5909, privoxy, 8119, 8123, 8180 }"
block in proto udp from any to $int_iface port $lan_udp_services
block in proto tcp from any to $int_iface port $lan_tcp_services

#pass in inet proto udp from { $vpn_net, $int_iface:network } to $int_iface port $lan_udp_services
#pass in inet proto tcp from { $vpn_net, $int_iface:network } to $int_iface port $lan_tcp_services
#pass out proto udp from $int_iface port $lan_udp_services to { $vpn_net, $int_iface:network }
#pass out proto tcp from $int_iface port $lan_tcp_services to { $vpn_net, $int_iface:network }

# Internet services
# https://support.apple.com/en-us/HT202944
internet_udp_services = "{ https, isakmp, l2f, ipsec-msft, 16384:16403 }"
internet_tcp_services = "{ 123 }"
#pass in inet proto udp from any to $int_iface port $internet_udp_services
#pass in inet proto tcp from any to $int_iface port $internet_tcp_services
pass out inet proto udp from $int_iface to any port $internet_udp_services
pass out inet proto tcp from $int_iface to any port $internet_tcp_services

# ssh really restrictive
pass in inet proto tcp from any to $int_iface port ssh	\
	keep state (max-src-conn 10, max-src-conn-rate 10/2,		\
	overload <bruteforce> flush global)
pass out inet proto tcp from $int_iface port ssh
 web, mail, calendarservice more restrictive
webmailcalcard_tcp_services = "{ smtp, www, imap, https, submission, imaps, \
	cert-responder, sieve, 8008, 8443, 8800, 8843 }"
pass in inet proto tcp from any to $int_iface	\
	port $webmailcalcard_tcp_services \
	keep state (max-src-nodes 50, max-src-conn 200, max-src-conn-rate 100/10,	\
	overload <bruteforce> flush global)
pass out inet proto tcp from $int_iface to any	\
	port $webmailcalcard_tcp_services
