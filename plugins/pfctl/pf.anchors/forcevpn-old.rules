# Block all non-VPN traffic

# VPN network
# $vpn_net == utun4/24 when Tunnelblick creates utun4
# vpn_net = "10.18.0/24"  # utun4 interface doesn't exist at boot time
# IP address of VPN server
vpn_ip = ""
vpn_port = ""
# Internal interface; use the command `ifconfig -a` or:
# $ ifconfig | pcregrep -M -o '^[^\t:]+:([^\n]|\n\t)*status: active' | egrep -o -m 1 '^[^\t:]+'
ext_iface = "en0"
# The interface of the logger
log_iface = "pflog0"
monitor_iface = "pflog1"
block_iface = "pflog2"
# Use a list in case Tunnelblick creates multiples utun interfaces
table <gateways> const { utun4 }

# Safely and easily force all traffic through a VPN on OSX

table <multicast> const { 0.0.0.0, 224.0.0.0/4, 255.255.255.255. ::/128, ff00::/8 }
table <link>      const { 127.0.0.0/8, 169.254.0.0/16, fe00::/64 }

# NOTE: You may need exceptions to get out of captive portals
#pass quick from any to 192.168.123.0/24

# First, allow all traffic through the VPN!
pass quick on { utun_iface }

# Let us talk to ourselves and receive traffic. That should be safe.
pass quick from any to { (en0), (en1), (en2) }

# Allow all outbound required traffic to the VPN server
pass out quick proto tcp from any to $vpn_ip port 22    # SSH (for SOCKS)
pass out quick proto tcp from any to $vpn_ip port 443   # HTTP (for SOCKS/Proxy/Config/etc)
pass out quick proto udp from any to $vpn_ip port 500   # ISAKMP
pass out quick proto udp from any to $vpn_ip port 4500  # IPSec-NAT-T

# Allow non-unicast and link-local traffic
pass quick from any to { <multicast>, <link> }

# Quirks: We may need to receive at non-obvious broadcast addresses fro DHCPv4
pass in quick inet proto udp from any port 67 to any port 68

# BLOCK EVERYTHING
block return quick log all
