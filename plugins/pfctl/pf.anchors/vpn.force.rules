# Block all non-VPN traffic

# VPN network
# $vpn_net == utun4/24 when Tunnelblick creates utun4
# vpn_net = "10.18.0/24"  # utun4 interface doesn't exist at boot time
# IP address of VPN server
vpn_ip = ""
vpn_port = ""
# Internal interface; use the command `ifconfig -a` or:
# $ ifconfig | pcregrep -M -o '^[^\t:]+:([^\n]|\n\t)*status: active' | egrep -o -m 1 '^[^\t:]+'
ext_iface = "en0"
# The interface of the logger
log_iface = "pflog0"
monitor_iface = "pflog1"
block_iface = "pflog2"
# Use a list in case Tunnelblick creates multiples utun interfaces
table <gateways> const { utun4 }

# Filtering
# Antispoof
antispoof log quick for { lo0 $ext_iface }

# block drop log (all, to $log_iface) all
# Block all traffick on default interface
# TODO: Is this still needed?
block out log (to $monitor_iface) on $ext_iface all
block in log (to $monitor_iface) on $ext_iface all

# Block all traffick on default interface
block return-rst out on $ext_iface proto tcp all
block return-rst in on $ext_iface proto tcp all
block return-icmp out on $ext_iface proto udp all
block return-icmp in on $ext_iface proto udp all

# Block to/from illeagl destinations or sources
block in log (to $log_iface)  quick from no-route to any
block drop in log (to $log_iface) quick from urpf-failed to any
# This is observed on macOS
block drop in log (to $log_iface) quick on $ext_iface from any to 255.255.255.255

# Whitelist
table <whitelist> const { $vpn_ip }
# pass in log (to $monitor_iface) quick proto { udp } from <whitelist>
pass out log (to $monitor_iface) quick proto { udp } to <whitelist>

# Open Source IP blocks
# Refresh with pfctl -a blockips -T load -f /opt/local/etc/macos-fortress/blockips.conf
# anchor 'blockips' label "Open Source IP Blocks"
# load anchor 'blockips' from '/opt/local/etc/macos-fortress/blockips.conf'

# Block brute force attacks
table <bruteforce> persist
block drop log (to $log_iface) quick from <bruteforce>

# Pass packets that go/from through TUN interfaces
pass out quick on { utun_iface } all
pass in quick log (to $monitor_iface) on { utun_iface } all
#pass in log (to $monitor_iface) on $ext_iface from <gateways> # TODO: Need to check
#pass out quick on $ext_iface to <gateways>
# Pass packets that go from VPN Server
pass out log (to $monitor_iface) on $ext_iface proto { tcp udp } from any to $vpn_ip # Alternate
pass in log (to $monitor_iface) on $ext_iface proto { tcp udp } from $vpn_ip # Alternate
#pass quick on <gateways> # Alternate
#pass quick on $ext_iface from <gateways> to <gateways>
#pass out log on egress inet from (egress) to any # Alternate

# Allow access to local networks over the default interface
table <local-networks> const { 172.16.0.0/12 192.168.0.0/16 }
#pass out on en0 proto { tcp udp } from any to <local-networks>
#pass in log (to $monitor_iface) quick on $ext_iface from $ext_iface:network # TODO: Need to check
#block in log (to $log_iface) quick on $ext_iface from $ext_iface:network # TODO: Need to check
#pass out log (to $monitor_iface) on $ext_iface to $ext_iface:network # TODO: Need to check

# ICMP (ping)
icmp_types = "echoreq"
#pass quick on $ext_iface inet proto icmp from any to $vpn_ip 
#pass quick on $ext_iface inet proto icmp all icmp-type $icmp_types
#pass quick on $ext_iface inet proto icmp all icmp-type 8 code 0
#pass quick proto icmp from any to any
pass out proto icmp from any to any

# SSH
block in log (to $monitor_iface) proto tcp from any to port 22

# DHCP
# Quirks: We may need to receive at non-obvious broadcast addresses for DHCPv4
pass quick log (to $monitor_iface) inet proto udp from any port 67 to any port 68
# Alternate
# pass inet proto udp from port 68 to port 67
# pass inet proto udp from port 67 to port 68

# DNS
# Block all DNS, except to the gateway
# block out proto udp to any port 53
#pass out inet proto udp to <gateways> port 53
pass out inet proto { tcp udp } from any to any port 53

# Broadcast
# pass from any to 255.255.255.255 keep state
# pass from 255.255.255.255 to any keep state

# Allow application-specific traffic over these interfaces
# multicast DNS
#pass proto udp from any to 224.0.0.0/4 keep state # TODO: Need to check
#pass proto udp from 224.0.0.0/4 to any keep state # TODO: Need to check
#pass on $ext_iface proto { udp, tcp } to { 224.0.0.2, 224.0.0.18, 224.0.0.251 } port mdns
#pass on $ext_iface proto igmp to { 224.0.0.1, 224.0.0.22, 224.0.0.251 }
pass in proto { tcp, udp } from any to port { 5353 5354 8612 }

# BLOCK EVERYTHING
# Include "log" keyword in each rule that you want to view.
# Debugging rules:
# $ sudo ifconfig pflog0 create
# $ sudo tcpdump -n -e -ttt -i pflog0
# $ sudo ifconfig pflog0 destroy
block return log (all, to $block_iface) quick all # TODO: Why?
