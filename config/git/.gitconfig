[init]
    defaultBranch = main
    # TODO: Enable git template?
    # templateDir = ~/.git-template

[apply]
    # Detect whitespace errors when applying a patch.
    whitespace = fix

[branch]
    # Show most recently changed branches first.
    sort = -committerdate

[core]
    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    # color opts: normal, black, red, green, yellow, blue, magenta, cyan, or white
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = true
    pager = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]
    added = green
    changed = yellow
    untracked = magenta
    deleted = red

# [commit]
#     # https://help.github.com/articles/signing-commits-using-gpg/
#     gpgsign = true

[credential]
    helper = osxkeychain

[diff]
    # Detect copies as well as renames.
    renames = copies

[difftool]
    prompt = false
    tool = mvimdiff

[diff "bin"]
    # Use `hexdump` to diff binary files.
    textconv = hexdump -v -C

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[help]
    # Automatically correct and execute mistyped commands.
    autocorrect = 1

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[pretty]
    # tut: http://gitimmersion.com/lab_10.html
    # ref: http://linux.die.net/man/1/git-log
    # Result: <short-sha> <commit-message> (<pointer-names>) -- <commit-author-name>; <relative-time>
    nice = "%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar"

[push]
    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    # followTags = true

# URL shorthands
[alias]
    # https://git.wiki.kernel.org/articles/a/l/i/Aliases.html
    # `git remote prune origin`: remove remote-tracking branches that were deleted from the remote repo
    # `git gc`: cleanup unnecessary files and optimize the local repository
    # `git clean -df`: remove untracked files and directories from the working tree
    # `git stash clear`: remove all stashed states
    trim = !git remote prune origin && git gc
    cleanup = !git clean -df && git stash clear
    undo = reset --soft HEAD~

    f = fetch
    fo = fetch origin
    fu = fetch upstream

    # Fetch a repository ($1) and checkout its ref ($2) HEAD
    # Use: `git browse https://github.com/necolas/dotfiles <commit-ish>`
    browse = !bash -c 'git fetch $1 ${2:-HEAD} && git checkout FETCH_HEAD' -

    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --date=format-local:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(yellow bold)%h%Creset%C(auto)%d%Creset - %s %C(cyan)%ad%Creset %C(green)%cn <%ce>%Creset %C(dim blue)(%cr)%Creset' --abbrev-commit -30
    gr = log --graph --decorate --oneline
    lg = log --graph --all --topo-order --date=format-local:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(yellow bold)%h%Creset%C(auto)%d%Creset - %s %C(cyan)%ad%Creset %C(green)%cn <%ce>%Creset %C(dim blue)(%cr)%Creset'
    ll = log --oneline
    lp = log --pretty=oneline -n 20 --graph --abbrev-commit
    last = log -1 HEAD --stat
    # Diffstat log
    lgst = log --stat
    # Short format diffstat log
    lgsf = log --stat --format=oneline --abbrev-commit

    # View the current working tree status using the short format.
    s = status -s
    st = status -sb

    # Diff what is staged for the next commit
    diffc = diff --cached
    # Diff overview
    diffst = diff --stat
    # Show the diff between the latest commit and the current state.
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules.
    p = pull --recurse-submodules

    # Clone a repository including all submodules.
    c = clone --recursive

    cm = commit -m
    # Commit all changes.
    ca = !git add -A && git commit -av
    # Amend the currently staged files to the latest commit.
    amend = commit --amend --reuse-message=HEAD
    # Amend commit without editing
    recommit = commit --amend --no-edit
    # Credit an author on the latest commit.
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue

    # Switch to a branch, creating it if necessary.
    co = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    tl = tag -l --sort=-committerdate --format='%(color:yellow bold)%(refname:strip=2)%(color:reset) | %(color:green)%(objectname:short)%(color:reset) - %(contents:subject) %(color:cyan)%(committerdate:iso)%(color:reset) %(color:green)%(authorname)%(color:reset) %(color:dim blue)(%(committerdate:relative))%(color:reset)'
    # v = describe --match 'v[0-9]*' --dirty 2>/dev/null
    se = !git rev-list --all | xargs git grep -F

    branches = branch --all
    br = branch --sort=-committerdate --format='%(HEAD) %(color:yellow bold)%(refname:short)%(color:reset) | %(color:green)%(objectname:short)%(color:reset) - %(contents:subject) %(color:cyan)%(committerdate:iso)%(color:reset) %(color:green)%(authorname)%(color:reset) %(color:dim blue)(%(committerdate:relative))%(color:reset)'
    # Remove branch
    del = branch -D
    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    # Returns the parent branch
    parent = "!git show-branch --current | sed \"s/].*//\" | grep \"\\*\"| grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed \"s/^.*\\[//\""
    # checkpoint = "!git log --oneline --all --parents --pretty='%d: %h' | grep \"^[^\\:]\" | sed \"s/.*\\,\\s//\" | sed \"s/)//\" | grep \"^[0-9a-z]\" | grep \"$(git parent)\" | sed \"s/$(git parent)\: //\" | tail"
    remotes = remote --verbose
    rv = remote --verbose

    # List aliases.
    aliases = config --get-regexp alias

    # Interactive rebase with the given number of latest commits.
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    p = push
    pf = push -f
    pu = push -u
    pt = push --tags

    po = push origin
    pfo = push -f origin
    puo = push -u origin
    pto = push --tags origin

    pl = pull
    pb = pull --rebase

    module-rm = "!f() { \
        _submodule_dir=$(git config --file .gitmodules --get \"submodule.$1.path\"); \
        git submodule deinit -f -- $_submodule_dir; \
        rm -rf \".git/modules/$1\"; \
        git rm -f $_submodule_dir; \
        git add .gitmodules; \
    }; f"
    module-update = "!f() { \
        git submodule update --init --recursive; \
	    git submodule foreach 'git fetch origin; \
            git checkout $(git rev-parse --abbrev-ref HEAD); \
            git reset --hard origin/$(git rev-parse --abbrev-ref HEAD); \
            git submodule update --recursive; \
            git clean -dfx'; \
    }; f"

    # Find out who is currently active on the repository
    # Displays committers in descending order of number of commits
    who = shortlog --numbered --summary --email --no-merges --since '3 months'

    # List contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email

[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
    insteadOf = "gist:"
